{{- if .Values.midgardBlockstore.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: midgard-blockstore
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.midgardBlockstore.pvc.size }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: midgard-blockstore
data:
  config.json: |
  {{- if (eq "mainnet" .Values.net) }}
    {
      "thorchain": {
        "fork_infos": [
          {
            "chain_id": "thorchain",
            "earliest_block_hash": "7D37DEF6E1BE23C912092069325C4A51E66B9EF7DDBDE004FF730CFABC0307B1",
            "earliest_block_height": 1,
            "hard_fork_height": 4786559
          },
          {
            "chain_id": "thorchain-mainnet-v1",
            "parent_chain_id": "thorchain",
            "earliest_block_hash": "9B86543A5CF5E26E3CE93C8349B2EABE5E238DFFC9EBE8EC6207FE7178FF27AC",
            "earliest_block_height": 4786560,
            "hard_fork_height": 17562000
          },
          {
            "chain_id": "thorchain-1",
            "parent_chain_id": "thorchain-mainnet-v1",
            "earliest_block_hash": "0B3C8F9E3EA7E9B1C10CAC5217ED771E0540671EFB9C5315BF01167266BCBEDF",
            "earliest_block_height": 17562001
          }
        ]
      }
    }
  {{- end }}
  {{- if (eq "stagenet" .Values.net) }}
    {
      "thorchain": {
        "fork_infos": [
          {
            "chain_id": "thorchain-stagenet-1",
            "earliest_block_hash": "E0F77EE63D901B41F51D62977B7034A11EA65CBC9C3C9057BF0B657FF27B908D",
            "earliest_block_height": 1,
            "hard_fork_height": 12500
          },
          {
            "chain_id": "thorchain-stagenet-2",
            "parent_chain_id": "thorchain-stagenet-1",
            "earliest_block_hash": "6F872F4DBF9D52AAE14F2296941C3A90F07D312634EC192AABAF02643047B82E",
            "earliest_block_height": 12501
          }
        ]
      }
    }
  {{- end }}

  dump.sh: |
    #!/bin/sh
    set -euo pipefail

    {{ if .Values.midgardBlockstore.readyEndpoint }}
    # wait for mesh to be ready
    while ! wget -qO- "{{ .Values.midgardBlockstore.readyEndpoint }}";
      do sleep 1;
    done
    {{- end }}

    # mark dump as complete
    trap "touch /blockstore/dump-complete" EXIT

    # mark dump failed if any command fail or job terminated
    trap "touch /blockstore/dump-fail" ERR INT TERM

    # dump blockstore
    /dump /config/config.json

    # remove partial files
    rm -f /blockstore/*.tmp

    # recreate hashes file
    echo "Updating hashes..."
    cd /blockstore
    touch hashes
    find . -maxdepth 1 -type f -not -name 'lost+found' -not -name 'hashes' \
      | sort \
      | sed 's|^\./||' \
      | grep -xvFf <(awk '{print $2}' hashes) \
      | xargs sha256sum >> hashes
    sed -i '/-/d' hashes
    echo "Updated hashes."

  sync.sh: |
    #!/bin/sh
    set -euo pipefail

    cleanup() {
      {{- if .Values.midgardBlockstore.quitEndpoint }}
      # quit mesh container
      curl -sX POST "{{ .Values.midgardBlockstore.quitEndpoint }}"
      {{- end }}

      # clear dump status files
      rm -f /blockstore/dump-*
    }

    # wait for dump to complete
    while [ ! -f /blockstore/dump-complete ]; do sleep 1; done

    # cleanup on exit
    trap cleanup EXIT

    # exit if dump failed
    if [ -f /blockstore/dump-fail ]; then
      exit 1
    fi

    # remove dump magic files for next run
    rm -f /blockstore/dump-*

    # upload to minio
    mc config host add minio http://minio:9000 minio minio123
    mc mb minio/snapshots || true
    mc anonymous set download minio/snapshots
    mc mirror --remove --overwrite --retry --limit-upload 100M /blockstore minio/snapshots/midgard-blockstore/
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: midgard-blockstore
spec:
  schedule: {{ .Values.midgardBlockstore.schedule }}
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          activeDeadlineSeconds: 21600 # 6 hours
          containers:
            - name: dump
              image: {{ .Values.midgardBlockstore.image.name }}:{{ .Values.midgardBlockstore.image.tag }}@sha256:{{ .Values.midgardBlockstore.image.hash }}
              imagePullPolicy: IfNotPresent
              env:
                - name: MIDGARD_BLOCKSTORE_LOCAL
                  value: /blockstore
                {{- range $key, $value := .Values.midgardBlockstore.env }}
                - name: {{ $key }}
                  value: {{ $value | quote }}
                {{- end }}
              command:
                - /config/dump.sh
              volumeMounts:
                - name: blockstore
                  mountPath: /blockstore
                - name: config
                  mountPath: /config
            - name: sync
              image: {{ .Values.minio.image.name }}:{{ .Values.minio.image.tag }}@sha256:{{ .Values.minio.image.hash }}
              imagePullPolicy: IfNotPresent
              command:
              - /config/sync.sh
              volumeMounts:
                - name: blockstore
                  mountPath: /blockstore
                - name: config
                  mountPath: /config
          volumes:
            - name: config
              configMap:
                name: midgard-blockstore
                defaultMode: 0755
            - name: blockstore
              persistentVolumeClaim:
                claimName: midgard-blockstore
{{- end }}
